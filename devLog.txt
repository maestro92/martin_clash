I am starting this project to learn a few things

-	all the cool network stuff Eric has one for game2
	(hitches, network recovery)

-	replays
	(to be able to play replays at different speed)

-	amazon server and redis all that kind of stuff

-	server code

-	test server load with bots

I currently work mostly on client code, so this is gonna my study on server/network side of stuff


##################################################################################
##################################### 2017/06/02 #################################
##################################################################################

-	setting up
so i was looking into the .gitignore and I was wondering what are unity meta files
and whether I should keep the meta files in version controls

found a great link that answers this quesiton

TL:DR
most definitely keep both the asset and the meta files cuz meta files has a guid information
and that is actually how a lot of things in unity communicate with each other

Link:
	https://blog.forrestthewoods.com/managing-meta-files-in-unity-713166ee3d30


-	the other main trick in setting up the project is the concept of hardlinking
both server and client has the shared code folder and it is doen through hardlinking.
for more, please visit the hardlink google drive


##################################################################################
##################################### 2017/06/06 #################################
##################################################################################

bumped into a lot of questions while setting up server code in MonoDevelop

Q:	what is the difference between a solution and a project?

A:	Google says:


	solution file (.sln) 

	project file (.vcproj)

	atleast in visual studio, a solution is a set of projects. 


links:
	https://stackoverflow.com/questions/1428265/solution-file-vs-project-file-in-visual-studio

	https://msdn.microsoft.com/en-us/library/b142f8e7.aspx

	since in visual studio, solution and project files has these definitions, I would assume it's the same in MonoDevelop



I have also noticed that in game2s setup, the monoDevelop solution had UnityEngine.dll as a reference. Turns out Visual studio has that too

So the question is:

Q:	What are references in Visual Studio (MonoDevelop)?

A:	Apparently references are just dynamically linked library

	https://www.youtube.com/watch?v=5QXav2r1piE

	if you look at the video from the above link, you can see that it is a tutorial teaching how to add a .dll file in visual studio



When looking for these .dll files on a mac or windows, use the link below
	https://docs.unity3d.com/460/Documentation/Manual/UsingDLL.html

Make sure you read carefully, especially the part 

		(you can see the internal structure of the bundle by using the Show Package Contents command from the contextual menu; 
		right click or ctrl-click the Unity application)

I just right clicked on the Unity application and selected "Show Package Contents" in Finder and that worked


##################################################################################
##################################### 2017/06/10 #################################
##################################################################################

starting to write basic code for the client to connect to the server on starting the game, then I had the question of what is IPaddress and Port number. Althought I studied this in CS433, but..... 

Anyways, I wrote a google doc for it.



when studying netcode, I have also noticed that both gaffer on games and Milota has this network connection class. 
I really kind of want to understand the different of these two apis

I dedicated an entire folder for that, so please refer to eric_netcode_vs_yojimbo




##################################################################################
##################################### 2017/06/22 #################################
##################################################################################
I have been spending the past two weeks understanding basic network socket programming. Mainly I have been studying Eric’s net code and reading the UNIX Network Programming, Third Edition.

after some studying, I have come to the impression that most server code is done through either doing select() style or multi-threaded sockets to handle clients. Eric’s code just does multi-threaded sockets with async receive and send for each socket


Usually my impression for these kind of architectural design decisions is that you just have to implement more to know more about it. It’s just like my experience with collision detections. You would really know the details and differences once you implement a few.

Also from my impression from googling. The architecture only really matters more when you get to thousands of connection. 

For this reason, I am just gonna model after Eric’s net code and do a multi-threaded sockets approach



##################################################################################
##################################### 2017/06/29 #################################
##################################################################################
Instead of doing things in binary, I am just gonna have server and client send actual strings to each other to ensure that the sockets are working properly






##################################################################################
##################################### 2017/07/06 #################################
##################################################################################
It seems like the way game 2 organizes the scene is that it has three different layers 

1. the main screen UI
2. unit battle overlay 
3. unit sprite layer

we use a gameobject, to represent each of these layer respectively, and we give it a camera as well.

For example:

	Main
	EventSystem
	UICamera	<-(has camera)
		Canvas
			BattleScreen
			CityScreen
			…
			…

	BattleView
		Hud	<—(has camera)
			unit0overlay
			unit1overlay
			unit2overlay

		World	<-(has camera)
			unit0sprite
			unit1sprite
			unit2sprite


so the main screen UI is all under a gameobject called UICamera. It’s just a game object with a camera component with it. It also has a Canvas Gameobject as a child, and this is in charge rendering all the main screen UI.

the UICamera gameobject is tucked somewhere in the corner of the scene (let’s say at x=-3000, y=-3000, z=0). 

Then we have another gameobject BattleView, that has two layers.

the Hud layer is also tucked in a corner (let’s say x=500, y=500, z=0)
and the world layer is somewhere else

The main idea is that separate all these “layers” in distinct places in the scene, and assign a camera for each “layer”

In short, create a game object to represent a layer, and set its position to a corner in the scene. Give it a camera and render.


Also in the GameObject Insepctor Window, you have the option of putting things in certain Layer. So for UI stuff, you should put it in "UI" Layer
Other stuff, you can put it in "default" Layer. Then for their each perspective Camera, you will set the Culling Mask to their layer

So for example: 
UICamera.Canvas will have Layer = "UI", 		UICamera culling Mask = "UI"
BattleView.Hud will have Layer = "UI", 			BattleView.Hud's camera culling Mask = "UI"
BattleView.World will have Layer = "Default",	BattleVIew.World's camera culing Mask = "Default"

Then


##################################################################################
##################################### 2017/07/12 #################################
##################################################################################

A correction fix from last post (07/06)
the hiearchy for the battleView is actually

	BattleView
		Hud	<—(has camera)
			unit0overlay
			unit1overlay
			unit2overlay

		World	
			Camera
			unit0sprite
			unit1sprite
			unit2sprite

the reason why we don't put the camera to the world game object is becuz this allows us to change what we want the camera to capture. If we straight up put the camera in the world gameObject, and everything else as child gameobject under world, then whenever we move the camera, all the children will move along with it








##################################################################################
##################################### 2017/07/13 #################################
##################################################################################

Encountered an interesting problem while working on the vector field. So the vector field is gonna be a text fiel with all the degrees

Example:

	0	0	90	180	180
	0	45	90	135	180
	0	45	90	135	180


this is an example where the angles are converging to the top center of this vector Field

So whence I parse it, I need to convert this degree to a vector3 indicating the direction, so my first approach was to straight up use tangent

				float y_xRatio = Mathf.Tan(degrees)
				Vector3 direction = new Vector3(1, y_xRatio, 0);

But apparently this fails in certain scenarios. For example when degrees is 90, y_xRatio is NaN. So after looking at the Game2 code, I found a better solution

				Vector3 direction = new Vector3(cos(degrees), sin(degrees), 0);

that way, you never run into NaN problems.

				


So I spent the whole night last night understanding the client and server folder set up, now I am going to take a crack at "redis"








##################################################################################
##################################### 2017/07/14 #################################
##################################################################################

I now have a better understaning of how IPointerDownHandler, IPointerUpHandler.... these interfaces work. Previously that I thought that if you have a script that implement these two interfaces and attach it to any gameObject, it will work.

NOT TRUE!

if you don't have a button on that gameobject, you need a Box Collider that covers the size of your gameObject and a PHysics Raycaster component for the IPointer interfaces to work. So there you go..

Note that PhysRaycaster will automatically add a camera to your gameObject.




##################################################################################
##################################### 2017/07/17 #################################
##################################################################################

So I am working battle against AI and I did some thinking about how ai management works. In Game2, we have our AI running just as just another client on your Unity Editor. So essentially our server doens't "Really" know who is a player and who is an AI. The Simulation is also agnostic of who is an AI, who is a player. 

I asked some other engineers about what was the reasoning behind managing our AI this way. And the engineers says it is mainly for simplicity at that time. In the end, you just need a place to run your AI code somewhere, you can put it on client, you can put it on the server, or you can even run it at a third (for example, the server spinning off bots on another computer and run AI bots there). It is all about AI management.

As I said though, facing all these different approaches, just start with one and see how it does. and I am going with the "AI as a client" approach for now.






##################################################################################
##################################### 2017/07/19 #################################
##################################################################################

My current plan is to get Battle With AI working. And it has gotten to the point where I actually need to send BattleStartingInfo from the server to the client, which means I need to get the Serializer Working.

My plan is to just use Binary and ignore the Json, like how Eric has it set up now.

So that is gonna be my next step.








